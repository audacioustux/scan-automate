apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: scan-workflow
  namespace: argo
spec:
  generateName: scan-
  entrypoint: scan
  artifactGC:
    strategy: OnWorkflowDeletion
  arguments:
    parameters:
      - name: url
      - name: email
      - name: rustscan
      - name: zap
  templates:
    - name: scan
      dag:
        tasks:
          - name: echo
            template: echo
          # - name: rustscan
          #   template: rustscan
          #   # when: "{{workflow.parameters.rustscan}} == true"
          # - name: zap
          #   template: zap
          #   # when: "{{workflow.parameters.zap}} == true"
          # - name: print
          #   template: print
          #   dependencies:
          #     - rustscan
          #     - zap
    - name: echo
      container:
        image: alpine
        command: [sh, -c]
        args:
          - |
            echo "url: {{workflow.parameters.url}}"
            echo "email: {{workflow.parameters.email}}"
            echo "rustscan: {{workflow.parameters.rustscan}}"
            echo "zap: {{workflow.parameters.zap}}"
    - name: rustscan
      output:
        artifacts:
          - name: rustscan-report
            path: /tmp/rustscan-report.txt
      container:
        image: rustscan/rustscan:2.1.1
        command: ["/bin/sh"]
        args:
          - -c
          - >-
            rustscan -r 1-65535 -t 5000 --accessible 
            -a {{workflow.parameters.url}} 
            > /tmp/rustscan-report.txt
        resources:
          limits:
            cpu: "0.5"
            memory: 500Mi
          requests:
            cpu: "1"
            memory: 1Gi
    - name: zap
      output:
        artifacts:
          - name: zap-report
            path: /tmp/zap-report.md
      container:
        image: ghcr.io/zaproxy/zaproxy:2.14.0
        command: ["/bin/sh"]
        args:
          - c
          - >-
            mkdir -p /zap/wrk &&
            zap-baseline.py
            -t "{{workflow.parameters.url}}"
            -w /tmp/zap-report.md
            -I
        resources:
          limits:
            cpu: "1"
            memory: 1Gi
          requests:
            cpu: "2"
            memory: 2Gi
    - name: print
      inputs:
        artifacts:
          - name: rustscan-report
            path: /tmp/rustscan-report.txt
            optional: true
          - name: zap-report
            path: /tmp/zap-report.md
            optional: true
      container:
        image: alpine
        workingDir: /tmp
        command: [sh, -c]
        args:
          - |
            cat *-report.*
  volumes:
    - name: docker-config
      secret:
        secretName: docker-config
        # create docker-config secret with `kubectl create secret generic docker-config --from-file=$HOME/.docker/config.json`