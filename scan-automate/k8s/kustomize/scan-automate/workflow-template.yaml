apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: scan-workflow
  namespace: argo
spec:
  generateName: scan-
  entrypoint: scan
  artifactGC:
    strategy: OnWorkflowDeletion
  volumeClaimTemplates:
    - metadata:
        name: workdir
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 256Mi
  arguments:
    parameters:
      - name: url
      - name: email
      - name: scans
  templates:
    - name: scan
      dag:
        tasks:
          - name: rustscan
            template: rustscan
          - name: zap
            template: zap
          - name: print
            template: print
            dependencies:
              - rustscan
              - zap
            # when rustscan is in `scans` array
            # when: "{{ contains(workflow.parameters.scans, 'rustscan') }}"
    - name: rustscan
      container:
        image: rustscan/rustscan:2.1.1
        cmd: ["/bin/sh"]
        args:
          - -c
          - |
            rustscan
            -b 1000
            -u {{workflow.parameters.url}}
            -a
            --accessible
            > /workdir/rustscan.txt
    - name: zap
      container:
        image: ghcr.io/zaproxy/zaproxy:stable
        cmd:
          - zap-full-scan.py
          - -t
          - "{{workflow.parameters.url}}"
          - -w
          - /workdir/zap-report.md
      volumeMounts:
        - name: workdir
          mountPath: /workdir
    - name: print
      container:
        image: alpine
        command: [sh, -c]
        args:
          - |
            cat /workdir/rustscan.txt
            cat /workdir/zap-report.md
      volumeMounts:
        - name: workdir
          mountPath: /workdir
  volumes:
    - name: docker-config
      secret:
        secretName: docker-config
        # create docker-config secret with `kubectl create secret generic docker-config --from-file=$HOME/.docker/config.json`