apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: scan-workflow
  namespace: argo
spec:
  generateName: scan-
  entrypoint: scan
  artifactGC:
    strategy: OnWorkflowDeletion
  volumeClaimTemplates:
    - metadata:
        name: workdir
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 256Mi
  arguments:
    parameters:
      - name: url
      - name: email
      - name: rustscan
      - name: zap
  templates:
    - name: scan
      dag:
        tasks:
          - name: rustscan
            template: rustscan
            when: "{{workflow.parameters.rustscan}} == true"
          - name: zap
            template: zap
            when: "{{workflow.parameters.zap}} == true"
          - name: gen-pdf
            template: gen-pdf
            dependencies:
              - rustscan
              - zap
    - name: rustscan
      container:
        image: rustscan/rustscan:2.1.1
        command: ["/bin/sh"]
        args:
          - -c
          - >-
            ulimit -n 5100 &&
            url=$(echo {{workflow.parameters.url}} | sed -e 's/http[s]*:\/\///g') &&
            rustscan -r 1-65535 -t 5000 -b 5000 --accessible
            -a $url
            > rustscan-report.txt
        workingDir: /workdir
        volumeMounts:
          - name: workdir
            mountPath: /workdir
        resources:
          requests:
            memory: 0.5Gi
            cpu: 0.5
          limits:
            memory: 1Gi
            cpu: 1
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
    - name: zap
      container:
        image: ghcr.io/zaproxy/zaproxy:2.14.0
        command: ["/bin/sh"]
        args:
          - -c
          - >-
            zap-baseline.py
            -t "{{workflow.parameters.url}}"
            -w zap-report.md
            -I
        volumeMounts:
          - name: workdir
            mountPath: /zap/wrk
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            memory: 2Gi
            cpu: 2
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
    - name: gen-pdf
      container:
        image: pandoc/core:latest
        command: ["/bin/sh"]
        args:
          - -c
          - >-
            cat *-report.* > report.md
            cat report.md
            pandoc -o report.pdf report.md
      outputs:  
        artifacts:  
          - name: output  
            path: /workdir/report.pdf
  volumes:
    - name: docker-config
      secret:
        secretName: docker-config
        # create docker-config secret with `kubectl create secret generic docker-config --from-file=$HOME/.docker/config.json`