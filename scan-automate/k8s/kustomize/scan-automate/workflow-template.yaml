apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: scan-workflow
  namespace: argo
spec:
  generateName: scan-
  entrypoint: scan
  artifactGC:
    strategy: OnWorkflowDeletion
  volumeClaimTemplates:
    - metadata:
        name: workdir
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 256Mi
  arguments:
    parameters:
      - name: id
      - name: email
      - name: rustscan
      - name: zap
  templates:
    - name: scan
      dag:
        tasks:
          # - name: debug
          #   template: debug
          # - name: ls
          #   template: ls
          #   dependencies:
          #     - debug
          - name: rustscan
            template: rustscan
            when: "{{=workflow.parameters.rustscan != ''}}"
          # - name: zap
          #   template: zap
          #   when: "{{=workflow.parameters.zap != ''}}"
          - name: gen-pdf
            template: gen-pdf
            dependencies:
              - rustscan
              # - zap
    - name: debug
      container:
        image: alpine:latest
        command: ["/bin/sh"]
        args:
          - -c
          - |
            echo "id: {{workflow.parameters.id}}"
            echo "email: {{workflow.parameters.email}}"
            echo "rustscan: {{workflow.parameters.rustscan}}"
            echo "zap: {{workflow.parameters.zap}}"
            touch ~/debug.txt
            touch debug.txt
        workingDir: /workdir
        volumeMounts:
          - name: workdir
            mountPath: /workdir
    - name: ls
      container:
        image: alpine:latest
        command: ["/bin/sh"]
        args:
          - -c
          - |
            ls -la
        workingDir: /workdir
        volumeMounts:
          - name: workdir
            mountPath: /workdir
    - name: rustscan
      inputs:
        parameters:
          - name: uri
            value: "{{=jsonpath(workflow.parameters.rustscan, '$.uri')}}"
      container:
        image: rustscan/rustscan:2.1.1
        command: ["/bin/sh"]
        args:
          - -c
          - |
            # check if the current directory is writable by the user
            if [ ! -w . ]; then
              echo "Current directory is not writable by the user"
              exit 1
            fi
            # exit on error
            set -e
            # set explicit ulimit
            ulimit -n 5100
            # canonicalize url
            uri=$(echo -n {{inputs.parameters.uri}} | sed -e 's/http[s]*:\/\///g')
            # run rustscan
            # add two spaces to the end of each line to prevent pandoc from interpreting the markdown
            rustscan -r 1-65535 -t 5000 -b 5000 --accessible -a $uri | sed 's/$/  /' > rustscan-report.md
        workingDir: /workdir
        volumeMounts:
          - name: workdir
            mountPath: /workdir
        resources:
          limits:
            memory: 1Gi
            cpu: "1"
          requests:
            memory: 500Mi
            cpu: 500m
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
    - name: zap
      inputs:
        parameters:
          - name: uri
            value: "{{=jsonpath(workflow.parameters.zap, '$.uri')}}"
      container:
        image: ghcr.io/zaproxy/zaproxy:2.14.0
        command: ["/bin/sh"]
        args:
          - -c
          - |
            # run zap-baseline
            zap-baseline.py -t "{{inputs.parameters.uri}}" -w zap-report.md -I
            # whitelabel report
            sed -i 's/Zap/Fncyber/gi' zap-report.md
        workingDir: /zap/wrk
        volumeMounts:
          - name: workdir
            mountPath: /zap/wrk
        resources:
          limits:
            memory: 1Gi
            cpu: "1"
          requests:
            memory: 500Mi
            cpu: 500m
        # securityContext:
        #   allowPrivilegeEscalation: false
        #   capabilities:
        #     drop:
        #       - ALL
    - name: gen-pdf
      container:
        image: pandoc/latex:latest
        command: ["/bin/sh"]
        args:
          - -c
          - |
            # concatenate reports
            cat *-report.* > report.md
            # generate pdf
            pandoc -o report.pdf report.md
        workingDir: /workdir
        volumeMounts:
          - name: workdir
            mountPath: /workdir
        resources:
          limits:
            memory: 0.5Gi
            cpu: 0.5
        # securityContext:
        #   allowPrivilegeEscalation: false
        #   capabilities:
        #     drop:
        #       - ALL
      outputs:
        artifacts:
          - name: output
            path: /workdir/report-{{workflow.parameters.id}}.pdf
            s3:
              endpoint: s3.amazonaws.com
              bucket: "{{workflow.parameters.email}}"
              key: report-{{workflow.parameters.id}}.pdf.gz
              accessKeySecret:
                name: aws-config
                key: AWS_ACCESS_KEY_ID
              secretKeySecret:
                name: aws-config
                key: AWS_SECRET_ACCESS_KEY
  volumes:
    - name: docker-config
      secret:
        secretName: docker-config
